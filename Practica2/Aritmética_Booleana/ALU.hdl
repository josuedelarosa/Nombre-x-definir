// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // Modificaciones en X
    Mux16(a= x, b= false, sel= zx, out= outZX);
    Not16(in= outZX, out= outNX);
    Mux16(a= outZX, b= outNX, sel= nx, out= outX);

    // Modificaciones en Y
    Mux16(a= y, b= false, sel= zy, out= outZY);
    Not16(in= outZY, out= outNY);
    Mux16(a= outZY, b= outNY, sel= ny, out= outY);

    // Selección de operación
    And16(a= outX, b= outY, out= andXY);
    Add16(a = outX, b = outY, out = sumXY);
    Mux16(a= andXY, b= sumXY, sel= f, out= funXY);

    // Negación de la salida
    Not16(in= funXY, out= notfunXY);
    Mux16(a= funXY, b= notfunXY, sel= no, out= out);
    Mux16(a= funXY, b= notfunXY, sel= no, out= salida);

    // Comprobar si la salida es 0
    Or8Way(in= salida[0..7], or= orOut1);   
    Or8Way(in= salida[8..15], or= orOut2);
    Or(a= orOut1, b= orOut2, out= orOut);   
    Not(in=orOut, out=zr);

    // Determinar si el resultado es negativo
    And(a=salida[15], b=true, out=ng);
}